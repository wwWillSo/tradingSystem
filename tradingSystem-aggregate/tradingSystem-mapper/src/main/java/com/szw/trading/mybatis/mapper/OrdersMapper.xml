<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.szw.trading.mybatis.mapper.OrdersMapper">
  <resultMap id="BaseResultMap" type="com.szw.trading.mybatis.entity.Orders">
    <id column="order_id" jdbcType="BIGINT" property="orderId" />
    <result column="trading_account_id" jdbcType="BIGINT" property="tradingAccountId" />
    <result column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <result column="order_no" jdbcType="VARCHAR" property="orderNo" />
    <result column="order_amount" jdbcType="DECIMAL" property="orderAmount" />
    <result column="order_price" jdbcType="DECIMAL" property="orderPrice" />
    <result column="service_amount" jdbcType="DECIMAL" property="serviceAmount" />
    <result column="order_hand" jdbcType="DECIMAL" property="orderHand" />
    <result column="order_side" jdbcType="INTEGER" property="orderSide" />
    <result column="order_type" jdbcType="INTEGER" property="orderType" />
    <result column="offset_order_no" jdbcType="VARCHAR" property="offsetOrderNo" />
    <result column="offsetted" jdbcType="INTEGER" property="offsetted" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="win_loss" jdbcType="DECIMAL" property="winLoss" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    order_id, trading_account_id, stock_code, order_no, order_amount, order_price, service_amount, 
    order_hand, order_side, order_type, offset_order_no, offsetted, status, create_time, 
    update_time, win_loss
  </sql>
  <select id="selectByExample" parameterType="com.szw.trading.mybatis.entity.OrdersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from `order`
    where order_id = #{orderId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from `order`
    where order_id = #{orderId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.szw.trading.mybatis.entity.Orders">
    insert into order (order_id, trading_account_id, stock_code, 
      order_no, order_amount, order_price, 
      service_amount, order_hand, order_side, 
      order_type, offset_order_no, offsetted, 
      status, create_time, update_time, 
      win_loss)
    values (#{orderId,jdbcType=BIGINT}, #{tradingAccountId,jdbcType=BIGINT}, #{stockCode,jdbcType=VARCHAR}, 
      #{orderNo,jdbcType=VARCHAR}, #{orderAmount,jdbcType=DECIMAL}, #{orderPrice,jdbcType=DECIMAL}, 
      #{serviceAmount,jdbcType=DECIMAL}, #{orderHand,jdbcType=DECIMAL}, #{orderSide,jdbcType=INTEGER}, 
      #{orderType,jdbcType=INTEGER}, #{offsetOrderNo,jdbcType=VARCHAR}, #{offsetted,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{winLoss,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.szw.trading.mybatis.entity.Orders">
    insert into order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="tradingAccountId != null">
        trading_account_id,
      </if>
      <if test="stockCode != null">
        stock_code,
      </if>
      <if test="orderNo != null">
        order_no,
      </if>
      <if test="orderAmount != null">
        order_amount,
      </if>
      <if test="orderPrice != null">
        order_price,
      </if>
      <if test="serviceAmount != null">
        service_amount,
      </if>
      <if test="orderHand != null">
        order_hand,
      </if>
      <if test="orderSide != null">
        order_side,
      </if>
      <if test="orderType != null">
        order_type,
      </if>
      <if test="offsetOrderNo != null">
        offset_order_no,
      </if>
      <if test="offsetted != null">
        offsetted,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="winLoss != null">
        win_loss,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=BIGINT},
      </if>
      <if test="tradingAccountId != null">
        #{tradingAccountId,jdbcType=BIGINT},
      </if>
      <if test="stockCode != null">
        #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="orderAmount != null">
        #{orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderPrice != null">
        #{orderPrice,jdbcType=DECIMAL},
      </if>
      <if test="serviceAmount != null">
        #{serviceAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderHand != null">
        #{orderHand,jdbcType=DECIMAL},
      </if>
      <if test="orderSide != null">
        #{orderSide,jdbcType=INTEGER},
      </if>
      <if test="orderType != null">
        #{orderType,jdbcType=INTEGER},
      </if>
      <if test="offsetOrderNo != null">
        #{offsetOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="offsetted != null">
        #{offsetted,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="winLoss != null">
        #{winLoss,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.szw.trading.mybatis.entity.OrdersExample" resultType="java.lang.Long">
    select count(*) from `order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update order
    <set>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=BIGINT},
      </if>
      <if test="record.tradingAccountId != null">
        trading_account_id = #{record.tradingAccountId,jdbcType=BIGINT},
      </if>
      <if test="record.stockCode != null">
        stock_code = #{record.stockCode,jdbcType=VARCHAR},
      </if>
      <if test="record.orderNo != null">
        order_no = #{record.orderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.orderAmount != null">
        order_amount = #{record.orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderPrice != null">
        order_price = #{record.orderPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.serviceAmount != null">
        service_amount = #{record.serviceAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.orderHand != null">
        order_hand = #{record.orderHand,jdbcType=DECIMAL},
      </if>
      <if test="record.orderSide != null">
        order_side = #{record.orderSide,jdbcType=INTEGER},
      </if>
      <if test="record.orderType != null">
        order_type = #{record.orderType,jdbcType=INTEGER},
      </if>
      <if test="record.offsetOrderNo != null">
        offset_order_no = #{record.offsetOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="record.offsetted != null">
        offsetted = #{record.offsetted,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.winLoss != null">
        win_loss = #{record.winLoss,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update order
    set order_id = #{record.orderId,jdbcType=BIGINT},
      trading_account_id = #{record.tradingAccountId,jdbcType=BIGINT},
      stock_code = #{record.stockCode,jdbcType=VARCHAR},
      order_no = #{record.orderNo,jdbcType=VARCHAR},
      order_amount = #{record.orderAmount,jdbcType=DECIMAL},
      order_price = #{record.orderPrice,jdbcType=DECIMAL},
      service_amount = #{record.serviceAmount,jdbcType=DECIMAL},
      order_hand = #{record.orderHand,jdbcType=DECIMAL},
      order_side = #{record.orderSide,jdbcType=INTEGER},
      order_type = #{record.orderType,jdbcType=INTEGER},
      offset_order_no = #{record.offsetOrderNo,jdbcType=VARCHAR},
      offsetted = #{record.offsetted,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      win_loss = #{record.winLoss,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.szw.trading.mybatis.entity.Orders">
    update order
    <set>
      <if test="tradingAccountId != null">
        trading_account_id = #{tradingAccountId,jdbcType=BIGINT},
      </if>
      <if test="stockCode != null">
        stock_code = #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="orderNo != null">
        order_no = #{orderNo,jdbcType=VARCHAR},
      </if>
      <if test="orderAmount != null">
        order_amount = #{orderAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderPrice != null">
        order_price = #{orderPrice,jdbcType=DECIMAL},
      </if>
      <if test="serviceAmount != null">
        service_amount = #{serviceAmount,jdbcType=DECIMAL},
      </if>
      <if test="orderHand != null">
        order_hand = #{orderHand,jdbcType=DECIMAL},
      </if>
      <if test="orderSide != null">
        order_side = #{orderSide,jdbcType=INTEGER},
      </if>
      <if test="orderType != null">
        order_type = #{orderType,jdbcType=INTEGER},
      </if>
      <if test="offsetOrderNo != null">
        offset_order_no = #{offsetOrderNo,jdbcType=VARCHAR},
      </if>
      <if test="offsetted != null">
        offsetted = #{offsetted,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="winLoss != null">
        win_loss = #{winLoss,jdbcType=DECIMAL},
      </if>
    </set>
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.szw.trading.mybatis.entity.Orders">
    update order
    set trading_account_id = #{tradingAccountId,jdbcType=BIGINT},
      stock_code = #{stockCode,jdbcType=VARCHAR},
      order_no = #{orderNo,jdbcType=VARCHAR},
      order_amount = #{orderAmount,jdbcType=DECIMAL},
      order_price = #{orderPrice,jdbcType=DECIMAL},
      service_amount = #{serviceAmount,jdbcType=DECIMAL},
      order_hand = #{orderHand,jdbcType=DECIMAL},
      order_side = #{orderSide,jdbcType=INTEGER},
      order_type = #{orderType,jdbcType=INTEGER},
      offset_order_no = #{offsetOrderNo,jdbcType=VARCHAR},
      offsetted = #{offsetted,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      win_loss = #{winLoss,jdbcType=DECIMAL}
    where order_id = #{orderId,jdbcType=BIGINT}
  </update>
</mapper>